@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="text-center">
    <h1 class="display-4">Welcome to Ashish's Test App</h1>
    <h5>
        This app has demos on Task Scheduling using Azure Functions/ In-App scheduling and AJAX calls to Razor Pages.
    </h5>
</div>

<p>&nbsp;</p>
<hr />

<div>

    <h2>Azure Functions Scheduling</h2>

    <p>I have written an Azure function that can be used to call <a href="/Actions"><strong>Actions </strong></a>page of this app <strong>every single minute</strong>. The CRON schedule for that is: &quot;* * * * *&quot;.</p>

    <p>The logs that are generated by this page call can be inspected from <a href="/Actions"><strong>here</strong></a>. Click <strong><em>Get Actions Page-Call Logs</em></strong> button to see them.</p>

    <p>This is very simple to put together.</p>

    <p>I believe this can even replace Autosys jobs, so that we can have one single repository for application code and scheduling code (as opposed to managing Autosys jobs and its PowerShell script).</p>

    <p>&nbsp;</p>
    <hr />

    <h2>In App Scheduling</h2>

    <p>I have added a <strong>Hosted Service</strong> to this Web App that can schedule its jobs in a CRON style schedule. This allows the app to schedule jobs on its own.</p>

    <p>1. An example of this is in the app, where a task is called <strong>every minute</strong> to fetch Quotes. Take a look at it <a href="/Scheduling"><strong>here</strong></a>.</p>

    <p>The CRON schedule for that task is: &quot;* * * * *&quot;.</p>

    <p>The logs that are generated by this method call in the backend can be inspected from <a href="/Actions"><strong>this</strong></a> page. Click <strong><em>Get Scheduling Method-Call Logs</em></strong> button to see them.</p>

    <p>2. Also, there's another task within the app that <strong>runs at every 30th minute</strong> to clear these logs.</p>

    <p>The CRON schedule for that task is: &quot;*/30 * * * *&quot;.</p>

    <p>I believe this can even replace Autosys jobs, so that we have one single repository for application code and scheduling code (as opposed to managing Autosys jobs and its PowerShell script).</p>

    <p>&nbsp;</p>
    <hr />

    <h2>Razor Pages and AJAX calls</h2>

    <p>The <a href="/Actions"><strong>Actions </strong></a> page is a Razor page that makes AJAX calls to another razor page in the backend.</p>

    <p>&nbsp;</p>
    <hr />

    <h2>Deploying this Web App to Azure</h2>

    <p>Deploying Web App to Azure App Service is very simple and straightforward.</p>

    <p>I followed all the instructions from <a href="https://docs.microsoft.com/en-us/azure/app-service/quickstart-dotnetcore?tabs=net60&amp;pivots=development-environment-vs">this</a> Microsoft docs page.</p>

    <p>However I ran into one issue while deploying it that took quite a bit of my time to figure out.</p>

    <p>The error message I was hit with is this:</p>
    <p>
        <code>
            <strong>
                Web Deploy experienced a connection problem with the server and had to terminate the connection. Contact your server administrator if the problem persists. Learn more at: https://go.microsoft.com/fwlink/?LinkId=221672#ERROR_CONNECTION_TERMINATED. Unexpected end of file has occurred. The following elements are not closed: results. Line 1, position 550.
            </strong>
        </code>
    </p>
    <p>The fix to this is to check the 'Make Package checkbox' like this:</p>
    <img src="/images/PublishFinal.png" alt="Final Step of Publish" style="width: 70%;max-height: 70%" />

    <p>&nbsp;</p>
    <hr />

    <h1>Deploying Azure Function to Azure</h1>

    <p>I followed instructions from <a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-create-your-first-function-visual-studio#publish-the-project-to-azure">this</a> Microsoft docs page.</p>

    <p>&nbsp;</p>
    <hr />

    <h1>Final Thoughts</h1>

    <p>
        Developing in Azure felt very productive. So I think it's a good idea to gradually move our Web applications to Azure.<br />
        For eg: Instead of creating a whole new VM to deploy a Web app (as we do now), why not just deploy it to Azure App Service?&nbsp;
    </p>

    <p>Also scheduling can be moved to application code, either using Azure Functions or in-app scheduling using hosted service.</p>

    <p>
        Azure Functions is a great option for that. One of the best thing about using Azure Functions is that it's essentially free for simple cases like scheduling.<br />
        It uses a &quot;consumption&quot; based model, which means we only get charged when our function is running.<br />
        We get a free quota of 1 million executions a month, so we can go a long way for free as mentioned <a href="https://azure.microsoft.com/en-gb/pricing/details/functions/">here</a>.
    </p>
    <p>I believe a lot more can be done using Azure Functions.</p>

    <p>In next steps, we can look into containerization.&nbsp;</p>

</div>